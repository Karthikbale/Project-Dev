pipeline {
  agent {
    docker {
      image 'karthikbale/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://44.201.91.200:9000"
    GIT_REPO_NAME = "Jenkins"
    GIT_USER_NAME = "Karthikbale"
    DOCKER_IMAGE = "karthikbale/ultimate-cicd:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        sh 'cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package -DskipTests'
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh """
            cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \\
              -Dsonar.login=$SONAR_AUTH_TOKEN \\
              -Dsonar.host.url=$SONAR_URL
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Git Commit & Push') {
  steps {
    sh '''
      git config user.email "karthikbale2002@gmail.com"
      git config user.name "Karthik Bale"

      if [ -n "$(git status --porcelain)" ]; then
        git add .
        git commit -m "Automated commit from Jenkins"
        git push origin main
      else
        echo "No changes to commit."
      fi
    '''
  }
}

  } // <--- Close stages
}   // <--- Close pipeline

