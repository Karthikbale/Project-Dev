pipeline {
    agent {
        docker {
            image 'karthikbale/maven-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Karthikbale/Project-Dev.git',
                        credentialsId: 'githubcreds'
                    ]]
                ])
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean package
                '''
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.237.42.30:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar \
                          -Dsonar.login=$SONAR_AUTH_TOKEN \
                          -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "karthikbale/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh '''
                        cd Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    docker.withRegistry('https://index.docker.io/v1/', 'dockercreds') {
                        docker.image("${DOCKER_IMAGE}").push()
